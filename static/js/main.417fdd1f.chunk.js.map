{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","style","color","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAiBeA,G,MAdF,SAACC,GACV,OACI,qBAAKC,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,iBAAmDC,IAAI,UAC/D,gCACI,6BAAKJ,EAAMK,OACX,6BAAKL,EAAMM,kBCahBC,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdE,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,OAHZK,SCEdC,G,MATG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,uBAAOC,KAAK,SACZC,YAAY,oBACZC,SAAUH,MC2CHI,E,kDA7CX,aAAe,IAAD,8BACV,gBAkBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAlBzC,EAAKC,MAAQ,CACThB,OAAQ,GACRK,YAAa,IAJP,E,gEAQO,IAAD,OAChBY,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKR,SAAS,CAACb,OAAQqB,S,+BAWrB,IAAD,OACCC,EAAiBC,KAAKP,MAAMhB,OAAOwB,QAAO,SAAAxB,GAC5C,OAAOA,EAAOH,KAAK4B,cAAcC,SAAS,EAAKV,MAAMX,YAAYoB,kBAErE,OAA6B,GAA1BF,KAAKP,MAAMhB,OAAO2B,OACV,4CAIH,gCACI,oBAAIC,MAAQ,CAACC,MAAM,SAAnB,yBACA,cAAC,EAAD,CAAWvB,aAAciB,KAAKZ,iBAC9B,cAAC,EAAD,CAAUX,OAAQsB,W,GAtCpBQ,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.417fdd1f.chunk.js","sourcesContent":["import  React  from 'react';\r\nimport './Card.css';\r\n\r\nconst card = (props) => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='cardstyle'>\r\n                <img src={`https://robohash.org/${props.id}?size=150x150`} alt=\"robot\"/>\r\n                <div>\r\n                    <h2>{props.name}</h2>\r\n                    <h5>{props.email}</h5>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i) => {\r\n                    return(\r\n                        <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email} \r\n                        />\r\n                    )\r\n                })\r\n            \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <input type='search' \r\n        placeholder='Search Robot Here' \r\n        onChange={searchChange} />\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({robots: users});\r\n        })\r\n        \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if(this.state.robots.length==0){\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div>\r\n                    <h1 style ={{color:\"black\"}} >Robofriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <CardList robots={filteredRobots}/>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}